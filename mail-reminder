#!/usr/bin/python3.11
# vim: set ts=4 sw=4 et: coding=UTF-8

#
# Copyright (c) 2010-2012, Novell, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#  * Neither the name of the <ORGANIZATION> nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#
# (Licensed under the simplified BSD license)
#
# Authors: Vincent Untz <vuntz@opensuse.org>
#


import os
import sys

import datetime
from email.mime.text import MIMEText
import email.utils
import optparse
import smtplib
import tomllib


class ConfigException(Exception):
    pass


#######################################################################


class Config:

    def __init__(self, config_file):
        self.config_file = config_file

        self.type = None
        self.biweekly_week = None
        self.day = None

        self.scheduled_events = []

        self.mail_on_rel_days = None
        self.mail_on_day_week_before = None
        self.template = None
        self.template_variables = {}

        self._parse()
        self._check()


    def _parse(self):
        def _get_helper(dictcfg, section, key, default = None):
            if dictcfg[section] and key in dictcfg[section].keys():
                return dictcfg[section][key]
            else:
                return default

        tomlcfg = {}
        with open(self.config_file, 'rb') as tomlcfgfile:
            tomlcfg = tomllib.load(tomlcfgfile)

        self.type = _get_helper(tomlcfg, 'event', 'type', None)
        self.biweekly_week = _get_helper(tomlcfg, 'event', 'biweekly_week', None)
        self.day = _get_helper(tomlcfg, 'event', 'day', None)

        self.mail_on_rel_days = _get_helper(tomlcfg, 'mail', 'mail_on_rel_days', None)
        self.mail_on_day_week_before = _get_helper(tomlcfg, 'mail', 'mail_on_day_week_before', None)
        self.template = _get_helper(tomlcfg, 'mail', 'template', None)
        if self.template:
            if self.template[0] != '/':
                self.template_fullpath = os.path.join(os.path.dirname(self.config_file), self.template)
            else:
                self.template_fullpath = self.template

        if 'template_variables' in tomlcfg.keys():
            for (key, value) in tomlcfg['template_variables'].items():
                self.template_variables[key] = value

        if 'schedule' in tomlcfg.keys():
            for (key, value) in tomlcfg['schedule'].items():
                date_fields = key.split('-')
                if len(date_fields) != 3:
                    raise ConfigException('Cannot parse date of event \'%s\' of schedule in %s.' % (key, self.config_file))

                try:
                    date = datetime.date(int(date_fields[0]), int(date_fields[1]), int(date_fields[2]))
                except ValueError:
                    raise ConfigException('Cannot parse date of event \'%s\' of schedule in %s.' % (key, self.config_file))

                self.scheduled_events.append((date, value))


    def _check(self):
        def _raise_missing_key(key, config_file):
            raise ConfigException('Missing \'%s\' key in %s.' % (key, config_file))

        def _convert_to_int(value, key, config_file, minval = None, maxval = None, check_none = True):
            if value is None:
                _raise_missing_key(key, self.config_file)

            if minval is not None:
                if maxval is not None:
                    emsg = 'Invalid value for \'%s\' key in %s: should be an integer between %d and %d.' % (key, self.config_file, minval, maxval)
                else:
                    emsg = 'Invalid value for \'%s\' key in %s: should be an integer above %d.' % (key, self.config_file, minval)
            elif maxval is not None:
                emsg = 'Invalid value for \'%s\' key in %s: should be an integer below %d.' % (key, self.config_file, maxval)
            else:
                emsg = 'Invalid value for \'%s\' key in %s: should be an integer.' % (key, self.config_file)

            try:
                retval = int(value)
            except ValueError:
                raise ConfigException(emsg)

            if minval is not None and retval < minval:
                raise ConfigException(emsg)
            if maxval is not None and retval > maxval:
                raise ConfigException(emsg)

            return retval

        if self.type is None:
            _raise_missing_key('type', self.config_file)
        if self.type not in ['weekly', 'biweekly', 'monthly', 'schedule']:
            raise ConfigException('Unknown type \'%s\' in %s.' % (self.type, self.config_file))

        if self.type == 'biweekly':
            if self.biweekly_week is None:
                raise ConfigException('Missing \'biweekly_week\' key for biweekly config in %s.' % (self.config_file,))
            if self.biweekly_week not in [0, 1]:
                raise ConfigException('Invalid value for \'biweekly_week\' key in %s: should be either 0 or 1.' % (self.config_file,))
            self.biweekly_week = int(self.biweekly_week)
        else:
            if self.biweekly_week is not None:
                raise ConfigException('\'biweekly_week\' key used while type is not \'biweekly\' in %s.' % (self.config_file,))

        if self.type in ['weekly', 'biweekly']:
            self.day = _convert_to_int(self.day, 'day', self.config_file, minval=1, maxval=7)
        elif self.type in ['monthly']:
            self.day = _convert_to_int(self.day, 'day', self.config_file, minval=1, maxval=31)
        elif self.type in ['schedule']:
            if self.day is not None:
                raise ConfigException('\'day\' key cannot be used with type \'schedule\' in %s.' % (self.config_file,))
            if not self.scheduled_events:
                raise ConfigException('No event defined for schedule in %s.' % (self.config_file,))
            for (date, descr) in self.scheduled_events:
                if not descr:
                    raise ConfigException('Event of schedule on %s has no description in %s.' % (date, self.config_file))

        if self.mail_on_rel_days is not None:
            if self.mail_on_day_week_before is not None:
                raise ConfigException('\'mail_on_rel_days\' and \'mail_on_day_week_before\' keys cannot be used at the same time in %s.' % (self.config_file,))

            self.mail_on_rel_days = _convert_to_int(self.mail_on_rel_days, 'mail_on_rel_days', self.config_file, minval=-6, maxval=-1)
        elif self.mail_on_day_week_before is not None:
            self.mail_on_day_week_before = _convert_to_int(self.mail_on_day_week_before, 'mail_on_day_week_before', self.config_file, minval=1, maxval=7)
        else:
            raise ConfigException('Missing \'mail_on_rel_days\' or \'mail_on_day_week_before\' key in %s.' % (self.config_file,))

        if self.template is None:
            _raise_missing_key('template', self.config_file)
        if not os.path.exists(self.template_fullpath):
            raise ConfigException('Template file \'%s\' from %s does not exist.' % (self.template, self.config_file))


    def get_events(self):
        if self.type in ['weekly', 'biweekly', 'monthly']:
            # We'll find date of next periodic event

            today = datetime.date.today()

            if self.type == 'weekly':
                week_day = today.isoweekday()

                if week_day < self.day:
                    # next event is this week
                    delta = datetime.timedelta(days=self.day-week_day)
                else:
                    # next event is next week
                    delta = datetime.timedelta(days=7 + self.day-week_day)

                event_day = today + delta
                return [ (event_day, '') ]

            elif self.type == 'biweekly':
                (year, week_number, week_day) = today.isocalendar()

                right_week = (week_number % 2 == self.biweekly_week)
                if week_day < self.day:
                    if right_week:
                        # it can still happen this week
                        delta = datetime.timedelta(days=self.day-week_day)
                    else:
                        # next event is next week
                        delta = datetime.timedelta(days=7 + self.day-week_day)
                else:
                    if right_week:
                        # next event is in two weeks
                        delta = datetime.timedelta(days=14 + self.day-week_day)
                    else:
                        # next event is next week
                        delta = datetime.timedelta(days=7 + self.day-week_day)

                event_day = today + delta
                return [ (event_day, '') ]

            elif self.type == 'monthly':
                def get_date(year, month, day):
                    # months don't all have the same number of days
                    while day >= 1:
                        try:
                            return datetime.date(year, month, day)
                        except ValueError:
                            day -= 1
                    raise Exception('Internal error: cannot compute next monthly day')

                if today.day < self.day:
                    # next event is this month
                    event_day = get_date(today.year, today.month, self.day)
                else:
                    # next event is next month
                    if today.month == 12:
                        event_day = get_date(today.year + 1, 1, self.day)
                    else:
                        event_day = get_date(today.year, today.month + 1, self.day)

                return [ (event_day, '') ]

        elif self.type in ['schedule']:
            return self.scheduled_events


    def get_mail(self, date, descr):
        date_dict = { 'year': date.year,
                      'month': date.month,
                      'day': date.day,
                      'date': date.strftime('%A %d %B %Y'),
                      'description': descr }

        # FIXME: might be better (and simpler?) to just use email.parser.Parser()

        try:
            fd = open(self.template_fullpath)
        except Exception as e:
            raise ConfigException('Cannot open template file \'%s\'.' % (self.template,))

        template = fd.read()

        # Copy the dict so we don't modify it
        full_dict = self.template_variables.copy()
        # Prefer our own values, since they should not be overwritten
        full_dict.update(date_dict)

        template = template % full_dict
        lines = template.split('\n')

        headers = {}
        headers_line = 0

        # Find headers
        for line in lines:
            f = line.find(':')
            # No ':' in line, so not a header anymore; note that an empty line
            # between headers and body is enough to trigger this, obviously
            if f == -1:
                break

            headers[line[:f]] = line[f+1:]
            headers_line += 1

        body_lines = lines[headers_line+1:]
        # Remove empty lines at the beginning/end
        while len(body_lines) > 0 and body_lines[0].strip() == '':
            body_lines = body_lines[1:]
        while len(body_lines) > 0 and body_lines[-1].strip() == '':
            body_lines = body_lines[:-1]

        body = '\n'.join(body_lines)
        mime = MIMEText(body)

        for key in list(headers.keys()):
            if not key in ['From', 'To', 'Subject', 'Reply-To']:
                raise ConfigException('Mail template file \'%s\' contains a non-authorized header: \'%s\'.' % (self.template, key))

        def _check_header_present(header, headers, template):
            if not header in headers:
                raise ConfigException('Mail template file \'%s\' does not contain header \'%s\'.' % (template, header))

        _check_header_present('From', list(headers.keys()), self.template)
        _check_header_present('To', list(headers.keys()), self.template)
        _check_header_present('Subject', list(headers.keys()), self.template)

        for (key, value) in headers.items():
            mime[key] = value

        mime['X-Mailer'] = 'https://github.com/openSUSE/mail-reminder'

        fromaddrs = [ addr for (name, addr) in email.utils.getaddresses([ headers['From'] ]) ]
        toaddrs = [ addr for (name, addr) in email.utils.getaddresses([ headers['To'] ]) ]

        if len(fromaddrs) != 1:
            raise ConfigException('Mail template file \'%s\' does not contain exactly one author for mail (\'From: me@example.net\').' % (self.template,))

        if len(toaddrs) == 0:
            raise ConfigException('Mail template file \'%s\' does not contain recipients for mail (\'To: jane@example.net, joe@example.net\').' % (self.template,))

        return (fromaddrs[0], toaddrs, mime.as_string())


#######################################################################


def handle_config_file(config_file, no_debug):
    try:
        config = Config(config_file)
        events = config.get_events()
    except ConfigException as e:
        print(e, file=sys.stderr)
        return False

    mailed = False

    for (event_day, event_descr) in events:
        # Get the mail before checking if we should it, so we can error out if the
        # mail template is broken
        try:
            (fromaddr, toaddrs, mail) = config.get_mail(event_day, event_descr)
        except ConfigException as e:
            print(e, file=sys.stderr)
            return False

        if config.mail_on_rel_days is not None:
            delta = datetime.timedelta(days=config.mail_on_rel_days + 7)  # Shift by 7 days
            check_day = event_day + delta
        elif config.mail_on_day_week_before is not None:
            delta = datetime.timedelta(days=config.mail_on_day_week_before - event_day.isoweekday(), weeks=-1)
            check_day = event_day + delta + datetime.timedelta(weeks=1)  # Shift by 1 week
        else:
            raise Exception('Internal error: no instruction on when to send mail')

        today = datetime.date.today()
        if today != check_day:
            if not no_debug:
                if event_descr:
                    print('%s: event \'%s\' on %s, reminder to be sent on %s.' % (config_file, event_descr, event_day, check_day))
                else:
                    print('%s: event on %s, reminder to be sent on %s.' % (config_file, event_day, check_day))
            continue

        if mailed:
            print('Warning: event \'%s\' not sent as an event has already been sent.' % event_descr, file=sys.stderr)
            continue

        mailed = True

        if not no_debug:
            print('%s: reminder mail for event:' % config_file)
            print('')
            print('   ===========')
            for line in mail.split('\n'):
                print('   ' + line)
            print('   ===========')
            print('')
        else:
            s = smtplib.SMTP()
            s.connect()
            s.sendmail(fromaddr, toaddrs, mail)

    return True



#######################################################################


def main(args):
    parser = optparse.OptionParser(usage='Usage: %prog [options] [CONFIG_FILE ...]')

    parser.add_option('--no-debug', dest='no_debug', action='store_true',
                      help='really send the mails')

    (options, args) = parser.parse_args()

    if len(args) != 0:
        config_files = args
    else:
        datadir = os.path.join(os.path.dirname(__file__), 'data')
        try:
            config_files = [ os.path.join(datadir, basename) for basename in os.listdir(datadir) if basename.endswith('.toml') ]
        except OSError:
            # Ignore exception if directory doesn't exist
            pass

    if not config_files:
        print('No configuration files could be automatically found. Please explicitly pass them as arguments.', file=sys.stderr)
        return 1

    for config_file in config_files:
        handle_config_file(config_file, options.no_debug)

    return 0


if __name__ == '__main__':
    try:
      ret = main(sys.argv)
      sys.exit(ret)
    except KeyboardInterrupt:
      pass
